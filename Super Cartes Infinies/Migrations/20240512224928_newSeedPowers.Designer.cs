// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Super_Cartes_Infinies.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240512224928_newSeedPowers")]
    partial class newSeedPowers
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.Property<int>("OwnedCardsId")
                        .HasColumnType("int");

                    b.Property<int>("decksId")
                        .HasColumnType("int");

                    b.HasKey("OwnedCardsId", "decksId");

                    b.HasIndex("decksId");

                    b.ToTable("DeckOwnedCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "User1Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf598ee0-436b-4a00-9a7e-a69b735b2283",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "63dde96c-8804-418b-9d07-a42d0b00565c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "User2Id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aed6420b-81e2-4c5a-af3a-a8cc86f5e387",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "922dacca-8e8f-4887-ad79-e0bc0c6af0d7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a7df93b7-c85a-4b4c-8988-f2d13a1fe5d1",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEL35pOmRr4Fr6ccINiuM2bxmOnHUK3fweV3Uexwq4OBvmzUd3EOogDrQEP4dlwYeCw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61da5147-651e-4c27-8853-a3a820553283",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSpell")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/0/0b/CART_SURFER_card_image.png",
                            IsSpell = false,
                            Name = "Cart Surfer"
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b2/COFFEE_SHOP_card_image.png",
                            IsSpell = false,
                            Name = "Coffee Shop"
                        },
                        new
                        {
                            Id = 3,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/2/22/ASTRO_BARRIER_card_image.png",
                            IsSpell = false,
                            Name = "Astro Barrier"
                        },
                        new
                        {
                            Id = 4,
                            Attack = 7,
                            Colour = "Orange",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/3/3d/HOT_CHOCOLATE_card_image.png",
                            IsSpell = false,
                            Name = "Hot Chocolate"
                        },
                        new
                        {
                            Id = 5,
                            Attack = 8,
                            Colour = "Violet",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/d/d2/LANDING_PAD_card_image.png",
                            IsSpell = false,
                            Name = "Landing Pad"
                        },
                        new
                        {
                            Id = 6,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/5/57/PIZZA_CHEF_card_image.png",
                            IsSpell = false,
                            Name = "Pizza Chef"
                        },
                        new
                        {
                            Id = 7,
                            Attack = 6,
                            Colour = "Red",
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b5/PAINT_BY_LETTERS_card_image.png",
                            IsSpell = false,
                            Name = "Paint by Letters"
                        },
                        new
                        {
                            Id = 8,
                            Attack = 1,
                            Colour = "Red",
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/3/30/MINE_card_image.png",
                            IsSpell = false,
                            Name = "Mine"
                        },
                        new
                        {
                            Id = 9,
                            Attack = 4,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/a/a5/CONSTRUCTION_WORKER_card_image.png",
                            IsSpell = false,
                            Name = "Construction Worker"
                        },
                        new
                        {
                            Id = 10,
                            Attack = 6,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/13/JET_PACK_ADVENTURE_card_image.png",
                            IsSpell = false,
                            Name = "Jetpack Adventure"
                        },
                        new
                        {
                            Id = 11,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f2/GIFT_SHOP_card_image.png",
                            IsSpell = false,
                            Name = "Gift Shop"
                        },
                        new
                        {
                            Id = 12,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/7/72/HIKING_IN_THE_FOREST_card_image.png",
                            IsSpell = false,
                            Name = "Hiking in the Forest"
                        },
                        new
                        {
                            Id = 13,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/a/a6/RESCUE_SQUAD_card_image.png",
                            IsSpell = false,
                            Name = "Rescue Squad"
                        },
                        new
                        {
                            Id = 14,
                            Attack = 7,
                            Colour = "Orange",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b3/PET_SHOP_card_image.png",
                            IsSpell = false,
                            Name = "Pet Shop"
                        },
                        new
                        {
                            Id = 15,
                            Attack = 8,
                            Colour = "Violet",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/c/c3/SKI_VILLAGE_card_image.png",
                            IsSpell = false,
                            Name = "Ski Village"
                        },
                        new
                        {
                            Id = 16,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f4/ICE_HOCKEY_card_image.png",
                            IsSpell = false,
                            Name = "Ice Hockey"
                        },
                        new
                        {
                            Id = 17,
                            Attack = 6,
                            Colour = "Red",
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/c/c1/SKI_HILL_card_image.png",
                            IsSpell = false,
                            Name = "Ski Hill"
                        },
                        new
                        {
                            Id = 18,
                            Attack = 1,
                            Colour = "Red",
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f5/SNOWBALL_FIGHT_card_image.png",
                            IsSpell = false,
                            Name = "Snowball Fight"
                        },
                        new
                        {
                            Id = 19,
                            Attack = 4,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/13/SNOW_FORTS_card_image.png",
                            IsSpell = false,
                            Name = "Snow Forts"
                        },
                        new
                        {
                            Id = 20,
                            Attack = 6,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/9/97/SOCCER_card_image.png",
                            IsSpell = false,
                            Name = "Soccer"
                        },
                        new
                        {
                            Id = 21,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/7/77/BEACH_card_image.png",
                            IsSpell = false,
                            Name = "Beach"
                        },
                        new
                        {
                            Id = 22,
                            Attack = 2,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/1a/FOOTBALL_card_image.png",
                            IsSpell = false,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 23,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f0/BASEBALL_card_image.png",
                            IsSpell = false,
                            Name = "Baseball"
                        },
                        new
                        {
                            Id = 24,
                            Attack = 7,
                            Colour = "Green",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/5/52/EMERALD_PRINCESS_card_image.png",
                            IsSpell = false,
                            Name = "Emerald Princess"
                        },
                        new
                        {
                            Id = 25,
                            Attack = 8,
                            Colour = "Orange",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/6/6b/BEAN_COUNTERS_card_image.png",
                            IsSpell = false,
                            Name = "Bean Counters"
                        },
                        new
                        {
                            Id = 26,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/e/e8/MANHOLE_COVER_card_image.png",
                            IsSpell = false,
                            Name = "Manhole Cover"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.Property<int>("CardPowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardPowerId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CardPowerId");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPower");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardStart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardStart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 1
                        },
                        new
                        {
                            Id = 5,
                            CardId = 2
                        },
                        new
                        {
                            Id = 6,
                            CardId = 3
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 4
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManaPerRound")
                        .HasColumnType("int");

                    b.Property<int>("NbCardsStart")
                        .HasColumnType("int");

                    b.Property<int>("NbCarteParDeck")
                        .HasColumnType("int");

                    b.Property<int>("NbDecks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Config");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManaPerRound = 3,
                            NbCardsStart = 4,
                            NbCarteParDeck = 5,
                            NbDecks = 3
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrentDeck")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("int");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("int");

                    b.Property<int>("OrdreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCardStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("PlayableCardId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayableCardId");

                    b.HasIndex("StatusId");

                    b.ToTable("PlayableCardStatus");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdentityUserId = "User1Id",
                            Name = "Test player 1"
                        },
                        new
                        {
                            Id = 2,
                            IdentityUserId = "User2Id",
                            Name = "Test player 2"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Property<int>("PowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PowerId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasValue")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowerId");

                    b.ToTable("Power");

                    b.HasData(
                        new
                        {
                            PowerId = 1,
                            Description = "First Strike permet à une carte d’attaquer en « premier » et de ne pas recevoir de dégât si elle tue la carte de l’adversaire.",
                            HasValue = false,
                            Icon = "https://leagueofitems.com/images/runes/256/8369.webp",
                            Name = "First Strike"
                        },
                        new
                        {
                            PowerId = 2,
                            Description = "Lorsqu’une carte défend, elle inflige X de dégâts AVANT de recevoir des dégâts. Si l’attaquant est tué par ces dégâts, l’attaque s’arrête et le défenseur ne reçoit pas de dégâts.",
                            HasValue = true,
                            Icon = "https://leagueofitems.com/images/items/128/3075.webp",
                            Name = "Thorns"
                        },
                        new
                        {
                            PowerId = 3,
                            Description = "Soigne les cartes alliées de X incluant elle-même AVANT d’attaquer.",
                            HasValue = true,
                            Icon = "https://cdnb.artstation.com/p/assets/images/images/059/650/103/large/mackenzie-miller-healthpotion.jpg?1676863888",
                            Name = "Heal"
                        },
                        new
                        {
                            PowerId = 4,
                            Description = "Vole le mana de l'adversaire.",
                            HasValue = false,
                            Icon = "https://cdn-icons-png.flaticon.com/512/843/843332.png",
                            Name = "Thief"
                        },
                        new
                        {
                            PowerId = 5,
                            Description = "Augmente l'attaque des cartes en jeu du joueur.",
                            HasValue = true,
                            Icon = "https://static.thenounproject.com/png/3257866-200.png",
                            Name = "Boost Attack"
                        },
                        new
                        {
                            PowerId = 6,
                            Description = "Inverse l'attaque et la défense de toutes les cartes en jeu.",
                            HasValue = false,
                            Icon = "https://cdn-icons-png.flaticon.com/512/5110/5110231.png",
                            Name = "Chaos"
                        },
                        new
                        {
                            PowerId = 7,
                            Description = "Ramène une carte (au hazard) du Graveyard du joueur en jeu. La carte ramené en jeu n'attaque pas tout de suite et a seulement 1 de Health.",
                            HasValue = false,
                            Icon = "https://cdn-icons-png.flaticon.com/512/4334/4334125.png",
                            Name = "Resurect"
                        },
                        new
                        {
                            PowerId = 8,
                            Description = "Ajoute une valeur de poison à la carte attaquée. Le poison diminue ensuite la vie d’une carte de la valeur du poison à la fin de son activation. Si une carte a déjà une valeur de poison et qu’elle est à nouveau attaquée, la valeur de poison est augmentée.",
                            HasValue = true,
                            Icon = "https://cdn-icons-png.flaticon.com/512/3953/3953085.png",
                            Name = "Poison"
                        },
                        new
                        {
                            PowerId = 9,
                            Description = "Empêche une carte d’agir pendant son activation durant X tours.",
                            HasValue = true,
                            Icon = "https://en.tankiwiki.com/images/en/5/53/Icon_Stun.png",
                            Name = "Stunned"
                        },
                        new
                        {
                            PowerId = 10,
                            Description = "Fait X dégâts au joueur adverse.",
                            HasValue = true,
                            Icon = "https://static-00.iconduck.com/assets.00/lightning-icon-1676x2048-p46nhgow.png",
                            Name = "Lightning Strike"
                        },
                        new
                        {
                            PowerId = 11,
                            Description = "Fait X dégâts à TOUTES les cartes en jeu (même les nôtres!).",
                            HasValue = true,
                            Icon = "https://cdn-icons-png.flaticon.com/512/3426/3426193.png",
                            Name = "Earthquake"
                        },
                        new
                        {
                            PowerId = 12,
                            Description = "Fait 1 à 6 de dégâts à une carte adverse (au hazard).",
                            HasValue = false,
                            Icon = "https://www.svgrepo.com/show/323837/card-random.svg",
                            Name = "Random Pain"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.OwnedCard", null)
                        .WithMany()
                        .HasForeignKey("OwnedCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("decksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("OwnedCards")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("CardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Power", "Power")
                        .WithMany()
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardStart", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("Decks")
                        .HasForeignKey("PlayerId1");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCardStatus", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.PlayableCard", null)
                        .WithMany("CardStatuses")
                        .HasForeignKey("PlayableCardId");

                    b.HasOne("Super_Cartes_Infinies.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Navigation("CardStatuses");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("OwnedCards");
                });
#pragma warning restore 612, 618
        }
    }
}
