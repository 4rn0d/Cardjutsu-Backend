// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Super_Cartes_Infinies.Data;

#nullable disable

namespace Super_Cartes_Infinies.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240424203750_10players")]
    partial class _10players
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.Property<int>("OwnedCardsId")
                        .HasColumnType("int");

                    b.Property<int>("decksId")
                        .HasColumnType("int");

                    b.HasKey("OwnedCardsId", "decksId");

                    b.HasIndex("decksId");

                    b.ToTable("DeckOwnedCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1030293-e485-43b9-8bb4-846989501ca7",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDW5S+EhhJxJEz+0vM1tWKk+kRWHF/tmHh5XPao4/wL3Th/Fx2p2LfFPqz92M4rXDw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be8bf105-5f1f-42f0-9840-793e62f08590",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111112",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0129a83c-99c8-4473-8764-b6928c10b6bc",
                            Email = "player1@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER1@AOL.COM",
                            NormalizedUserName = "PLAYER1@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMLhuGz7HN1CkXsrTgtMzymDOmEgkaD78puDTJxzgptCDZZXl0tVYasXqvJSDiKZNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb9afd24-8064-4ed7-a746-c2b4546c2e8a",
                            TwoFactorEnabled = false,
                            UserName = "player1@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111113",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7562015f-cb24-468c-9b3a-2eb06b0f7c06",
                            Email = "player2@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER2@AOL.COM",
                            NormalizedUserName = "PLAYER2@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELDHJ4UTHjaiicBekpWC7I1eB84GH5DbSv4Wixpkc6aMzkbKR554giT9GoxUUKaVaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ff79973-4761-40ac-bb70-dec76f703e39",
                            TwoFactorEnabled = false,
                            UserName = "player2@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111114",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d6133bd5-341d-49c1-aaf7-f4c0663244d9",
                            Email = "player3@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER3@AOL.COM",
                            NormalizedUserName = "PLAYER3@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM7xLNGU5S6y5XsM6Hjb+F7gv8sLEaW3+2VD/Fpev/d3RRezv6BX5hjVKZt0c8dCig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c6bb8e11-599e-4b19-b5f5-f4df0b26fa1d",
                            TwoFactorEnabled = false,
                            UserName = "player3@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27a73def-ae73-46c4-97b8-39dafbf27f71",
                            Email = "player4@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER4@AOL.COM",
                            NormalizedUserName = "PLAYER4@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCSStLWpFhBWxAqG+AkfiXNZ++UAqJzM4J7JMCraWwu3JQkveYG8OkrifPQmg1S/w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6692af3-17a6-4709-a99b-36fbed7dd827",
                            TwoFactorEnabled = false,
                            UserName = "player4@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111116",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2c8377b-b65c-4c4a-a481-da867286e791",
                            Email = "player5@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER5@AOL.COM",
                            NormalizedUserName = "PLAYER5@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFjVclN/8wiELsLGpJfRYdeKdGRNJulPOwyN2q8zj52XK2+tAV+mw7hFBbWHPOEQ9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec1680b5-e09a-49b1-8964-521f39fe38d8",
                            TwoFactorEnabled = false,
                            UserName = "player5@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111117",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a9dcaeb3-0785-4ba0-ab26-2e3b1fab703c",
                            Email = "player6@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER6@AOL.COM",
                            NormalizedUserName = "PLAYER6@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGweN3P5YNS1qj30kxKIb5sX0GBwBgaocOZsDwi2bek9naKhDVBrrZ9xSrCLDpJcKg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8874f5e5-f338-4af3-9fe2-5961212588c1",
                            TwoFactorEnabled = false,
                            UserName = "player6@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111118",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6ad64d2-7991-45f3-ac9f-4c4b8126a994",
                            Email = "player7@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER7@AOL.COM",
                            NormalizedUserName = "PLAYER7@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA189l7IpUr6El08H0fLGaWUGu3M1wZLw3oxsvVk1xNF1rdZ4DSxDwpRkpCb/1YoEw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "51a34b04-8f72-4e13-af47-587944b721c1",
                            TwoFactorEnabled = false,
                            UserName = "player7@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111119",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b66eccb3-6627-4223-8700-d6e8e0e8e6ff",
                            Email = "player8@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER8@AOL.COM",
                            NormalizedUserName = "PLAYER8@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLLQM5Dc+PCfj/Oz0hHifHAgcscadd9KE8hEtE/8/IGAmGjORG1E4nSZ+E5K34MuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb80812b-3568-447b-8e8e-c5ada80ebdf7",
                            TwoFactorEnabled = false,
                            UserName = "player8@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111120",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "01e7c638-f3b4-4e5f-91bb-903336a02b86",
                            Email = "player9@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER9@AOL.COM",
                            NormalizedUserName = "PLAYER9@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKoDa2F727UV47vcxA2h/M5Jm5JIh+i9n1lDwkS/ieYp88r7QxwCFWDnSPyk/4gNdQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb98a390-ce90-45d6-92ba-9ddf9b80f92f",
                            TwoFactorEnabled = false,
                            UserName = "player9@aol.com"
                        },
                        new
                        {
                            Id = "11111111-1111-1111-1111-111111111121",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "333ce92e-63b7-4b58-9d34-ecaf78c5862b",
                            Email = "player10@aol.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "PLAYER10@AOL.COM",
                            NormalizedUserName = "PLAYER10@AOL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECobIyob+GULc/r7eLa4rw6d/iThrYiHSqyOMQGm4/1PPi+v51a4FbG50cLyucOqqw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d7aec882-0cc1-4a22-9f56-db2e96ed76e4",
                            TwoFactorEnabled = false,
                            UserName = "player10@aol.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "11111111-1111-1111-1111-111111111111",
                            RoleId = "11111111-1111-1111-1111-111111111112"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/0/0b/CART_SURFER_card_image.png",
                            Name = "Cart Surfer"
                        },
                        new
                        {
                            Id = 2,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b2/COFFEE_SHOP_card_image.png",
                            Name = "Coffee Shop"
                        },
                        new
                        {
                            Id = 3,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/2/22/ASTRO_BARRIER_card_image.png",
                            Name = "Astro Barrier"
                        },
                        new
                        {
                            Id = 4,
                            Attack = 7,
                            Colour = "Orange",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/3/3d/HOT_CHOCOLATE_card_image.png",
                            Name = "Hot Chocolate"
                        },
                        new
                        {
                            Id = 5,
                            Attack = 8,
                            Colour = "Violet",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/d/d2/LANDING_PAD_card_image.png",
                            Name = "Landing Pad"
                        },
                        new
                        {
                            Id = 6,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/5/57/PIZZA_CHEF_card_image.png",
                            Name = "Pizza Chef"
                        },
                        new
                        {
                            Id = 7,
                            Attack = 6,
                            Colour = "Red",
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b5/PAINT_BY_LETTERS_card_image.png",
                            Name = "Paint by Letters"
                        },
                        new
                        {
                            Id = 8,
                            Attack = 1,
                            Colour = "Red",
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/3/30/MINE_card_image.png",
                            Name = "Mine"
                        },
                        new
                        {
                            Id = 9,
                            Attack = 4,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/a/a5/CONSTRUCTION_WORKER_card_image.png",
                            Name = "Construction Worker"
                        },
                        new
                        {
                            Id = 10,
                            Attack = 6,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/13/JET_PACK_ADVENTURE_card_image.png",
                            Name = "Jetpack Adventure"
                        },
                        new
                        {
                            Id = 11,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f2/GIFT_SHOP_card_image.png",
                            Name = "Gift Shop"
                        },
                        new
                        {
                            Id = 12,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/7/72/HIKING_IN_THE_FOREST_card_image.png",
                            Name = "Hiking in the Forest"
                        },
                        new
                        {
                            Id = 13,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/a/a6/RESCUE_SQUAD_card_image.png",
                            Name = "Rescue Squad"
                        },
                        new
                        {
                            Id = 14,
                            Attack = 7,
                            Colour = "Orange",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/b/b3/PET_SHOP_card_image.png",
                            Name = "Pet Shop"
                        },
                        new
                        {
                            Id = 15,
                            Attack = 8,
                            Colour = "Violet",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/c/c3/SKI_VILLAGE_card_image.png",
                            Name = "Ski Village"
                        },
                        new
                        {
                            Id = 16,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f4/ICE_HOCKEY_card_image.png",
                            Name = "Ice Hockey"
                        },
                        new
                        {
                            Id = 17,
                            Attack = 6,
                            Colour = "Red",
                            Cost = 4,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/c/c1/SKI_HILL_card_image.png",
                            Name = "Ski Hill"
                        },
                        new
                        {
                            Id = 18,
                            Attack = 1,
                            Colour = "Red",
                            Cost = 2,
                            Health = 9,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f5/SNOWBALL_FIGHT_card_image.png",
                            Name = "Snowball Fight"
                        },
                        new
                        {
                            Id = 19,
                            Attack = 4,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/13/SNOW_FORTS_card_image.png",
                            Name = "Snow Forts"
                        },
                        new
                        {
                            Id = 20,
                            Attack = 6,
                            Colour = "Yellow",
                            Cost = 2,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/9/97/SOCCER_card_image.png",
                            Name = "Soccer"
                        },
                        new
                        {
                            Id = 21,
                            Attack = 3,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 3,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/7/77/BEACH_card_image.png",
                            Name = "Beach"
                        },
                        new
                        {
                            Id = 22,
                            Attack = 2,
                            Colour = "Blue",
                            Cost = 3,
                            Health = 4,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/1/1a/FOOTBALL_card_image.png",
                            Name = "Football"
                        },
                        new
                        {
                            Id = 23,
                            Attack = 2,
                            Colour = "Green",
                            Cost = 1,
                            Health = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/f/f0/BASEBALL_card_image.png",
                            Name = "Baseball"
                        },
                        new
                        {
                            Id = 24,
                            Attack = 7,
                            Colour = "Green",
                            Cost = 4,
                            Health = 6,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/5/52/EMERALD_PRINCESS_card_image.png",
                            Name = "Emerald Princess"
                        },
                        new
                        {
                            Id = 25,
                            Attack = 8,
                            Colour = "Orange",
                            Cost = 5,
                            Health = 8,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/6/6b/BEAN_COUNTERS_card_image.png",
                            Name = "Bean Counters"
                        },
                        new
                        {
                            Id = 26,
                            Attack = 4,
                            Colour = "Violet",
                            Cost = 3,
                            Health = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/clubpenguin/images/e/e8/MANHOLE_COVER_card_image.png",
                            Name = "Manhole Cover"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.Property<int>("CardPowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CardPowerId"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PowerId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("CardPowerId");

                    b.HasIndex("CardId");

                    b.HasIndex("PowerId");

                    b.ToTable("CardPower");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardStart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardStart");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3
                        },
                        new
                        {
                            Id = 4,
                            CardId = 1
                        },
                        new
                        {
                            Id = 5,
                            CardId = 2
                        },
                        new
                        {
                            Id = 6,
                            CardId = 3
                        },
                        new
                        {
                            Id = 7,
                            CardId = 7
                        },
                        new
                        {
                            Id = 8,
                            CardId = 8
                        },
                        new
                        {
                            Id = 9,
                            CardId = 4
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ManaPerRound")
                        .HasColumnType("int");

                    b.Property<int>("NbCardsStart")
                        .HasColumnType("int");

                    b.Property<int>("NbCarteParDeck")
                        .HasColumnType("int");

                    b.Property<int>("NbDecks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Config");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManaPerRound = 3,
                            NbCardsStart = 4,
                            NbCarteParDeck = 5,
                            NbDecks = 3
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeckName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCurrentDeck")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("PlayerId1");

                    b.ToTable("Decks");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMatchCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlayerATurn")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerDataAId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerDataBId")
                        .HasColumnType("int");

                    b.Property<string>("UserAId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserBId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WinnerUserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerDataAId");

                    b.HasIndex("PlayerDataBId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchPlayersData");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("PlayerId");

                    b.ToTable("OwnedCards");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("CardId")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId1")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId2")
                        .HasColumnType("int");

                    b.Property<int?>("MatchPlayerDataId3")
                        .HasColumnType("int");

                    b.Property<int>("OrdreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("MatchPlayerDataId");

                    b.HasIndex("MatchPlayerDataId1");

                    b.HasIndex("MatchPlayerDataId2");

                    b.HasIndex("MatchPlayerDataId3");

                    b.ToTable("PlayableCard");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EloScore")
                        .HasColumnType("int");

                    b.Property<string>("IdentityUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdentityUserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EloScore = 2000,
                            IdentityUserId = "11111111-1111-1111-1111-111111111112",
                            Name = "Pro player"
                        },
                        new
                        {
                            Id = 2,
                            EloScore = 750,
                            IdentityUserId = "11111111-1111-1111-1111-111111111113",
                            Name = "iWhiff"
                        },
                        new
                        {
                            Id = 3,
                            EloScore = 1970,
                            IdentityUserId = "11111111-1111-1111-1111-111111111114",
                            Name = "GertrudeTTV"
                        },
                        new
                        {
                            Id = 4,
                            EloScore = 600,
                            IdentityUserId = "11111111-1111-1111-1111-111111111115",
                            Name = "Noob"
                        },
                        new
                        {
                            Id = 5,
                            EloScore = 1000,
                            IdentityUserId = "11111111-1111-1111-1111-111111111116",
                            Name = "moomz"
                        },
                        new
                        {
                            Id = 6,
                            EloScore = 800,
                            IdentityUserId = "11111111-1111-1111-1111-111111111117",
                            Name = "pipo"
                        },
                        new
                        {
                            Id = 7,
                            EloScore = 1070,
                            IdentityUserId = "11111111-1111-1111-1111-111111111118",
                            Name = "GLT"
                        },
                        new
                        {
                            Id = 8,
                            EloScore = 1400,
                            IdentityUserId = "11111111-1111-1111-1111-111111111119",
                            Name = "Wooo"
                        },
                        new
                        {
                            Id = 9,
                            EloScore = 1500,
                            IdentityUserId = "11111111-1111-1111-1111-111111111120",
                            Name = "Hibou"
                        },
                        new
                        {
                            Id = 10,
                            EloScore = 1630,
                            IdentityUserId = "11111111-1111-1111-1111-111111111121",
                            Name = "P10"
                        });
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Power", b =>
                {
                    b.Property<int>("PowerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PowerId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasValue")
                        .HasColumnType("bit");

                    b.Property<string>("Icone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PowerId");

                    b.ToTable("Power");

                    b.HasData(
                        new
                        {
                            PowerId = 1,
                            Description = "First Strike permet à une carte d’attaquer en « premier » et de ne pas recevoir de dégât si elle tue la carte de l’adversaire.",
                            HasValue = false,
                            Icone = "https://leagueofitems.com/images/runes/256/8369.webp",
                            Name = "First Strike"
                        },
                        new
                        {
                            PowerId = 2,
                            Description = "Lorsqu’une carte défend, elle inflige X de dégâts AVANT de recevoir des dégâts. Si l’attaquant est tué par ces dégâts, l’attaque s’arrête et le défenseur ne reçoit pas de dégâts.",
                            HasValue = true,
                            Icone = "https://leagueofitems.com/images/items/128/3075.webp",
                            Name = "Thorns"
                        },
                        new
                        {
                            PowerId = 3,
                            Description = "Soigne les cartes alliées de X incluant elle-même AVANT d’attaquer (mais les cartes ne peuvent pas avoir plus de health qu’au départ.)",
                            HasValue = true,
                            Icone = "https://cdnb.artstation.com/p/assets/images/images/059/650/103/large/mackenzie-miller-healthpotion.jpg?1676863888",
                            Name = "Heal"
                        },
                        new
                        {
                            PowerId = 4,
                            Description = "Vole le mana de l'adversaire",
                            HasValue = false,
                            Icone = "https://cdn-icons-png.flaticon.com/512/843/843332.png",
                            Name = "Thief"
                        });
                });

            modelBuilder.Entity("DeckOwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.OwnedCard", null)
                        .WithMany()
                        .HasForeignKey("OwnedCardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Deck", null)
                        .WithMany()
                        .HasForeignKey("decksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("OwnedCards")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardPower", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany("CardPowers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Power", "Power")
                        .WithMany()
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.CardStart", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Deck", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", null)
                        .WithMany("Decks")
                        .HasForeignKey("PlayerId1");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Match", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataA")
                        .WithMany()
                        .HasForeignKey("PlayerDataAId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", "PlayerDataB")
                        .WithMany()
                        .HasForeignKey("PlayerDataBId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PlayerDataA");

                    b.Navigation("PlayerDataB");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.OwnedCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.PlayableCard", b =>
                {
                    b.HasOne("Super_Cartes_Infinies.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("BattleField")
                        .HasForeignKey("MatchPlayerDataId");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("CardsPile")
                        .HasForeignKey("MatchPlayerDataId1");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Graveyard")
                        .HasForeignKey("MatchPlayerDataId2");

                    b.HasOne("Super_Cartes_Infinies.Models.MatchPlayerData", null)
                        .WithMany("Hand")
                        .HasForeignKey("MatchPlayerDataId3");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("IdentityUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdentityUser");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Card", b =>
                {
                    b.Navigation("CardPowers");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.MatchPlayerData", b =>
                {
                    b.Navigation("BattleField");

                    b.Navigation("CardsPile");

                    b.Navigation("Graveyard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("Super_Cartes_Infinies.Models.Player", b =>
                {
                    b.Navigation("Decks");

                    b.Navigation("OwnedCards");
                });
#pragma warning restore 612, 618
        }
    }
}
